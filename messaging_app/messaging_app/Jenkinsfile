pipeline {
    agent {
        docker {
            image 'python:3.10'
        }
    }

    environment {
        GITHUB_CREDENTIALS = credentials('github-credentials-id')
        DOCKER_CREDENTIALS = credentials('dockerhub-credentials-id')
        IMAGE_NAME = "Masterpitan/messaging_app"
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Cloning repository..."
                git branch: 'main',
                    url: 'https://github.com/Masterpitan/alx-backend-python.git',
                    credentialsId: "${GITHUB_CREDENTIALS}"
            }
        }

        stage('Install Dependencies') {
            steps {
                echo "Installing dependencies..."
                sh '''
                    pip3 install --upgrade pip
                    pip3 install -r messaging_app/requirements.txt
                    pip3 install pytest pytest-html
                '''
            }
        }

        stage('Run Tests') {
            steps {
                echo "Running pytest..."
                sh '''
                    pytest messaging_app --junitxml=report.xml --html=report.html || true
                '''
            }
        }

        stage('Publish Reports') {
            steps {
                junit 'report.xml'
                publishHTML([
                    allowMissing: true,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: '.',
                    reportFiles: 'report.html',
                    reportName: 'Pytest HTML Report'
                ])
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image..."
                sh '''
                    docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} -f messaging_app/Dockerfile .
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                echo "Pushing Docker image to Docker Hub..."
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials-id',
                                                 usernameVariable: 'DOCKER_USER',
                                                 passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push ${IMAGE_NAME}:${BUILD_NUMBER}
                        docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${IMAGE_NAME}:latest
                        docker push ${IMAGE_NAME}:latest
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning workspace..."
            cleanWs()
        }
    }
}
